(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{396:function(s,t,a){"use strict";a.r(t);var e=a(54),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"prettierrc-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prettierrc-js"}},[s._v("#")]),s._v(" .prettierrc.js")]),s._v(" "),a("h2",{attrs:{id:"scheme"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scheme"}},[s._v("#")]),s._v(" Scheme")]),s._v(" "),a("div",{staticClass:"language-jsdoc extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsdoc"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Include parentheses around a sole arrow function parameter.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(' "always"\n     * '),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'always'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'avoid'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v('\n     *    - always: Always include parens. Example: `(x) => x`\n     *    - avoid: Omit parens when possible. Example: `x => x`\n     */\n    arrowParens: "always",\n    /**\n     * '),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Put > of opening tags on the last line instead of on a new line.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" false\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    bracketSameLine: false,\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Print spaces between brackets.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" true\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    bracketSpacing: true,\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v("\n     * Print (to stderr) where a cursor at the given position would move to after formatting.\n     * This option cannot be used with --range-start and --range-end.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" -1\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    cursorOffset: -1,\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Control how Prettier formats quoted code embedded in the file.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(' "auto"\n     * '),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'auto'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'off'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v('\n     *    - auto: Format embedded code if Prettier can automatically identify it.\n     *    - off: Never automatically format embedded code.\n     */\n    embeddedLanguageFormatting: "auto",\n    /**\n     * '),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Which end of line characters to apply.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(' "lf"\n     * '),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lf'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'crlf'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'cr'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'auto'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v('\n     *    - lf: Line Feed only (\\\\n), common on Linux and macOS as well as inside git repos\n     *    - crlf: Carriage Return + Line Feed characters (\\\\r\\\\n), common on Windows\n     *    - cr: Carriage Return character only (\\\\r), used very rarely\n     *    - auto: Maintain existing\\n(mixed values within one file are normalised by looking at what\'s used after the first line)\n     */\n    endOfLine: "lf",\n    /**\n     * '),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Specify the input filepath. This will be used to do parser inference.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    // filepath: '',\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" How to handle whitespaces in HTML.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" 'css''\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'css'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'strict'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ignore'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v('\n     *    - css: Respect the default value of CSS display property.\n     *    - strict: Whitespaces are considered sensitive.\n     *    - ignore: Whitespaces are considered insensitive.\n     */\n    htmlWhitespaceSensitivity: "css",\n    /**\n     * '),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Insert @format pragma into file's first docblock comment.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" false\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    insertPragma: false,\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Use single quotes in JSX.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" false\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    jsxSingleQuote: false,\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Which parser to use.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" ''\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"flow"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"babel"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"espree"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"meriyah"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"graphql"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"markdown"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mdx"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vue"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"yaml"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"glimmer"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"html"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"angular"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lwc"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"css"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"less"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"scss"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"json"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"json5"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"typescript"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"babel-flow"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"babel-ts"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"json-stringify"')]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("    string\n     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v('\n     */\n    // parser: "",\n    /**\n     * '),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Custom directory that contains prettier plugins in node_modules subdirectory.\n     * Overrides default behavior when plugins are searched relatively to the location of Prettier.\\nMultiple values are accepted.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" []\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@param")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    pluginSearchDirs: [],\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Add a plugin. Multiple plugins can be passed as separate `--plugin`s.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" []\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    plugins: [],\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" The line length where Prettier will try wrap.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" 80\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    printWidth: 80,\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" How to wrap prose.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(' "preserve"\n     * '),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'always'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'never'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'preserve'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v('\n     *    - always Wrap prose if it exceeds the print width.\n     *    - never Do not wrap prose.\n     *    - preserve Wrap prose as-is.\n     */\n    proseWrap: "preserve",\n    /**\n     * '),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Change when properties in objects are quoted.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(' "as-needed"\n     * '),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'as-needed'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'consistent'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'preserve'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v('\n     *    - as-needed: Only add quotes around object properties where required.\n     *    - consistent: If at least one property in an object requires quotes, quote all properties.\n     *    - preserve: Respect the input use of quotes in object properties.\n     */\n    quoteProps: "as-needed",\n    /**\n     * '),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Format code ending at a given character offset (exclusive).\n     * The range will extend forwards to the end of the selected statement.\n     * This option cannot be used with --cursor-offset.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" null\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("number "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    rangeEnd: null,\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Format code starting at a given character offset.\n     * The range will extend backwards to the start of the first line containing the selected statement.\n     * This option cannot be used with --cursor-offset.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@param")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    rangeStart: 0,\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Require either '@prettier' or '@format' to be present in the file's first docblock comment\n     * in order for it to be formatted.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" false\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    requirePragma: false,\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Print semicolons.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" true\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    semi: true,\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Use single quotes instead of double quotes.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" false\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    singleQuote: false,\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Number of spaces per indentation level.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" 2\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    tabWidth: 4,\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Print trailing commas wherever possible when multi-line.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" 'es5'\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'es5'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'none'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'all'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v('\n     *    - es5: Trailing commas where valid in ES5 (objects, arrays, etc.)\n     *    - none: description": "No trailing commas.\n     *    - all: Trailing commas wherever possible (including function arguments).\n     */\n    trailingComma: "es5",\n    /**\n     * '),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Indent with tabs instead of spaces.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" false\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    useTabs: true,\n    /**\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@description")]),s._v(" Indent script and style tags in Vue files.\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@default")]),s._v(" false\n     * "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v("\n     */\n    vueIndentScriptAndStyle: false,\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(";\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);